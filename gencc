#!/usr/bin/perl

my $PROGRAM = 'gencc';
my $VERSION = '0.1';
my $DESCR   = 'credit card numbers generator';

use strict;
use warnings;
use feature 'say';
use Getopt::Std; $Getopt::Std::STANDARD_HELP_VERSION = 1;
use Pod::Usage;
use POSIX;

my %cards = (
    VISA        =>  {
        prefix  =>  [qw( 4539 4556 4916 4532 4929 40240071 4485 4716 4 )],
    },

    MASTERCARD  =>  {
        prefix  =>  [qw( 51 52 53 54 55
                         2221 2222 2223 2224 2225 2226 2227 2228 2229
                         223 224 225 226 227 228 229
                         23 24 25 26
                         270 271 2720 )],
        digits  =>  16,
    },

    AMEX        =>  {
        prefix  =>  [qw( 34 37 )],
        digits  =>  15,
    },

    DISCOVER    =>  {
        prefix  =>  [qw( 6011 )],
        digits  =>  16,
    },

    DINERS      =>  {
        prefix  =>  [qw( 300 301 302 303 36 38 )],
        digits  =>  14,
    },

    ENROUTE     =>  {
        prefix  =>  [qw( 2014 2149 )],
        digits  =>  15,
    },

    JCB         =>  {
        prefix  =>  [qw( 35 )],
        digits  =>  16,
    },

    VOYAGER     =>  {
        prefix  =>  [qw( 8699 )],
        digits  =>  15,
    },
);

$cards{ VISA13 }{prefix} = \$cards{ VISA }{prefix}->@*;
$cards{ VISA13 }{digits} = 13;
$cards{ VISA16 }{prefix} = \$cards{ VISA }{prefix}->@*;
$cards{ VISA16 }{digits} = 16;

# Generate CC number:
# 'prefix' is the start of the CC number as a string, any number digits.
# 'length' is the length of the CC number to generate. Typically 13 or 16.
sub completed_number {
    my ($prefix, $length) = @_;

    my $ccnumber = $prefix;

    # generate digits
    $ccnumber .= int(rand 10) while length $ccnumber < $length - 1;

    # calculate sum
    # Luhn Algorithm http://en.wikipedia.org/wiki/Luhn_algorithm
    my $sum = 0;
    my $pos = 0;
    my $reversed_ccnumber = scalar reverse $ccnumber;

    while ($pos < $length - 1) {
        my $odd = substr($reversed_ccnumber, $pos, 1) * 2;
        $odd -= 9 if $odd > 9;

        $sum += $odd;
        $sum += substr($reversed_ccnumber, $pos+1, 1) if $pos != $length - 2;

        $pos += 2;
    }

    # calculate check digit
    my $check_digit = ((floor($sum / 10) + 1) * 10 - $sum) % 10;
    $ccnumber .= $check_digit;

    return $ccnumber;
}

# TODO
sub credit_card_number {
    my ($card, $length, $how_many) = @_;
    my @result;

    for my $i (0 .. $how_many - 1) {
        my $prefixes = scalar $cards{ $card }{prefix}->@*;
        my $choice   = rand $prefixes;

        my $ccprefix = $cards{ $card }{prefix}[ $choice ];

        push @result, completed_number( $ccprefix, $length );
    }

    return \@result;
}

###############################################################################

sub VERSION_MESSAGE { say "$PROGRAM $VERSION - $DESCR" }
sub HELP_MESSAGE    { pod2usage(-exitval => 0, -verbose => 2) }

###############################################################################

use vars qw($opt_n);
getopts('n:');

@ARGV = keys %cards if @ARGV == 1 && uc $ARGV[0] eq 'ALL';

for my $arg (@ARGV) {
    my $card = uc $arg;
    next if not exists $cards{ $card } or $card eq 'VISA';

    my $digits = $cards{ $card }{digits};

    say "# $card";
    say for credit_card_number($card, $digits, $opt_n || 1)->@*;
}

__END__

=pod

=encoding UTF-8

=head1 NAME

gencc - credit card numbers generator

=head1 VERSION

version 0.1

=head1 DESCRIPTION

A simple program to generate credit card numbers that pass the
MOD 10 check (Luhn formula).

Usefull for testing e-commerce sites during development.

=head1 SYNOPSIS

 gencc [-n COUNT] [--] [CARDS...]

 COUNT:
    How many? One by default.

 CARDS:
    visa13          (VISA 13 digits)
    visa16          (VISA 16 digits)
    mastercard      (MasterCard)
    amex            (American Express)
    discover        (Discover)
    diners          (Diners Club / Carte Blanche)
    enroute         (enRoute)
    jcb             (JCB)
    voyager         (Voyager)

    all             (all of the above)

=head1 EXAMPLE

=over 2

=item Generate one card of each type:

  $ gencc all

  # DISCOVER
  6011910682716059
  # ENROUTE
  214994042293874
  # DINERS
  36986690765720
  # AMEX
  346811970580034
  # VISA13
  4716561096006
  # MASTERCARD
  2240540381513861
  # JCB
  3576145242167923
  # VISA16
  4716674173945014
  # VOYAGER
  869982892481275

=item Don't forget to strip the comments in case of creating wordlists:

  $ gencc C<args> | sed '/^#/d'

=item Generate 999 VISA (13 digits) cards, select unique ones, and save to file:

  $ gencc -n999 visa13 | sort -u > ccards.txt

=item Generate 9 VISA (16 digits) and 9 MasterCards:

  $ gencc -n9 visa16 mastercard

=back

=head1 AUTHOR

Graham King, "<https://github.com/grahamking>"

chinarulezzz, "<https://github.com/chinarulezzz>"

=head1 LICENSE AND COPYRIGHT

Copyright 2003-2012 Graham King

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=cut

# vim:sw=4:ts=4:sts=4:et:cc=80
# End of file
